<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]" />
    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["GauntletExchange.Web.styles.css"]" />
    <link href="https://cdn.jsdelivr.net/npm/video.js@8.21.0/dist/video-js.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/video.js@8.21.0/dist/video.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/videojs-hls-quality-selector@2.0.0/dist/videojs-hls-quality-selector.min.js"></script>
    <script>
        // This function polls until videojs is loaded, then initializes the player.
        window.initializePlayer = function(elementId) {
            console.log("initializePlayer called for", elementId);
            return new Promise(function(resolve, reject) {
                function tryInit() {
                    console.log("Trying to initialize videojs; typeof videojs:", typeof videojs);
                    if (typeof videojs !== "undefined") {
                        // Initialize the player with a customized control bar (disable fullscreen and PiP)
                        var player = videojs(elementId, {
                            controlBar: {
                                fullscreenToggle: false,
                                pictureInPictureToggle: false
                            }
                        });
                        console.log("videojs initialized:", player);
                        // Initialize the quality selector plugin.
                        player.hlsQualitySelector({
                            displayCurrentQuality: true
                        });
                        window._videoJsPlayers = window._videoJsPlayers || {};
                        window._videoJsPlayers[elementId] = player;
                        resolve(player);
                    } else {
                        setTimeout(tryInit, 50);
                    }
                }
                tryInit();
            });
        };

        // Dispose the player when needed.
        window.disposePlayer = function(elementId) {
            if (window._videoJsPlayers && window._videoJsPlayers[elementId]) {
                window._videoJsPlayers[elementId].dispose();
                delete window._videoJsPlayers[elementId];
                console.log("Disposed player", elementId);
            }
        };
    </script>
    <ImportMap />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="InteractiveServer" />
</head>

<body>
    <Routes @rendermode="InteractiveServer" />
    <script src="_framework/blazor.web.js"></script>
    <script src="js/explore.js"></script>
</body>

</html>
