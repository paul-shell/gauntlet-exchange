@page "/explore"
@using System.Collections.ObjectModel
@inject IJSRuntime JS
@implements IAsyncDisposable

<PageTitle>Explore - Gauntlet Exchange</PageTitle>

<style>
    .tiktok-feed {
        height: 100vh;
        width: 100vw;
        background: #000;
        position: fixed;
        top: 0;
        left: 0;
        overflow-y: scroll;
        scroll-snap-type: y mandatory;
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    .tiktok-feed::-webkit-scrollbar {
        display: none;
    }

    .video-container {
        height: 100vh;
        width: 100vw;
        position: relative;
        scroll-snap-align: start;
        scroll-snap-stop: always;
        display: flex;
        justify-content: center;
        align-items: center;
        background: #000;
    }

    .loading-container {
        height: 100vh;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        scroll-snap-align: start;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #333;
        border-top: 5px solid #fff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<div class="tiktok-feed" @ref="feedContainer">
    @if (cards != null)
    {
        @for (var i = 0; i < cards.Count; i++)
        {
            var card = cards[i];
            <div class="video-container">
                <div class="video-content paused" id="player-@card.VideoId" @onclick="() => TogglePlayPause(card.VideoId)">
                    <div class="play-pause-overlay"></div>
                    <video 
                        class="video-player"
                        playsinline
                        muted
                        loop
                        preload="auto"
                        autoplay
                        poster="@card.PosterUrl"
                        data-src="@card.VideoUrl"
                        data-type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
                <!-- Additional UI (interaction buttons, video info, etc.) can go here -->
            </div>
        }
    }

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
        </div>
    }
</div>

@code {
    private ElementReference feedContainer;
    private DotNetObjectReference<Explore>? objRef;
    private IJSObjectReference? module;
    private bool isLoading;
    private int currentPage;
    private const int PAGE_SIZE = 10;

    public record CardItem(string VideoId, string VideoUrl, string PosterUrl);
    private ObservableCollection<CardItem> cards = new();

    private async Task<List<CardItem>> GetNextPageAsync()
    {
        // Simulate API delay.
        await Task.Delay(500);
        var items = new List<CardItem>();
        for (int i = 0; i < PAGE_SIZE; i++)
        {
            var videoId = $"stream-{Guid.NewGuid().ToString("N").Substring(0, 8)}";
            items.Add(new CardItem(
                videoId,
                "https://gauntletai.blob.core.windows.net/videos/test/master.m3u8",
                $"https://placehold.co/1080x1920/FF69B4/FFF?text={Uri.EscapeDataString(videoId)}"
            ));
        }
        return items;
    }

    private async Task LoadMoreItems()
    {
        if (isLoading) return;
        isLoading = true;
        StateHasChanged();
        try
        {
            var items = await GetNextPageAsync();
            foreach (var item in items)
            {
                cards.Add(item);
            }
            currentPage++;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading items: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMoreItems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/explore.js");
                objRef = DotNetObjectReference.Create(this);
                await module.InvokeVoidAsync("onLoad", objRef);
                Console.WriteLine("Explore.js module loaded successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing video handling: {ex.Message}");
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        try
        {
            if (module is not null)
            {
                await module.InvokeVoidAsync("onDispose");
                await module.DisposeAsync();
            }
            objRef?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disposing explore component: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnIntersection()
    {
        if (!isLoading)
        {
            await LoadMoreItems();
        }
    }

    private async Task TogglePlayPause(string videoId)
    {
        try
        {
            if (module is not null)
            {
                await module.InvokeVoidAsync("togglePlayPause", videoId);
            }
        }
        catch (TaskCanceledException)
        {
            // Swallow exception during rapid toggling or disposal.
        }
    }
}
