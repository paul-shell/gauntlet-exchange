@page "/explore"
@using System.Collections.ObjectModel
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Explore - Gauntlet Exchange</PageTitle>

<HeadContent>
    <script src="js/explore.js"></script>
</HeadContent>

<style>
    .tiktok-feed {
        height: 100vh;
        width: 100vw;
        background: #000;
        position: fixed;
        top: 0;
        left: 0;
        overflow-y: scroll;
        scroll-snap-type: y mandatory;
        -ms-overflow-style: none;  /* Hide scrollbar for IE and Edge */
        scrollbar-width: none;     /* Hide scrollbar for Firefox */
    }

    .tiktok-feed::-webkit-scrollbar {
        display: none;  /* Hide scrollbar for Chrome, Safari and Opera */
    }

    .video-container {
        height: 100vh;
        width: 100vw;
        position: relative;
        scroll-snap-align: start;
        scroll-snap-stop: always;
        display: flex;
        justify-content: center;
        align-items: center;
        background: #000;
    }

    .video-content {
        position: relative;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        cursor: pointer;
    }

    .video-player {
        position: absolute;
        width: 100%;
        height: 100%;
        object-fit: cover;
        top: 0;
        left: 0;
    }

    .interaction-buttons {
        position: absolute;
        right: 12px;
        bottom: 150px;
        display: flex;
        flex-direction: column;
        gap: 20px;
        z-index: 100;
    }

    .interaction-button {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: white;
        gap: 5px;
    }

    .button-icon {
        width: 45px;
        height: 45px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 24px;
    }

    .button-count {
        font-size: 12px;
        font-weight: 600;
    }

    .video-info {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 20px;
        background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
        color: white;
    }

    .video-info h3 {
        margin: 0;
        font-size: 16px;
        font-weight: 600;
    }

    .video-info p {
        margin: 8px 0 0 0;
        font-size: 14px;
        opacity: 0.9;
    }

    .music-info {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-top: 12px;
        font-size: 14px;
    }

    .music-icon {
        font-size: 16px;
    }

    .loading-container {
        height: 100vh;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        scroll-snap-align: start;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #333;
        border-top: 5px solid #fff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .poster-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .play-pause-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 80px;
        height: 80px;
        background: rgba(0, 0, 0, 0.5);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 1;
        transition: opacity 0.3s ease;
        z-index: 10;
        pointer-events: none;
    }

    /* The JS code adds the "paused" class when a video is paused */
    .video-content.playing .play-pause-overlay {
        opacity: 0;
    }

    .video-content.paused .play-pause-overlay,
    .video-content:not(.playing):not(.paused) .play-pause-overlay {
        opacity: 1;
    }

    .play-pause-overlay::before {
        content: "‚è∏Ô∏è";
        font-size: 40px;
        color: white;
    }

    .video-content.playing .play-pause-overlay::before {
        content: "‚ñ∂Ô∏è";
    }
</style>

<div class="tiktok-feed" @ref="feedContainer">
    @if (cards != null)
    {
        @for (var i = 0; i < cards.Count; i++)
        {
            var card = cards[i];
            <div class="video-container">
                <div class="video-content paused" id="player-@card.VideoId" @onclick="() => TogglePlayPause(card.VideoId)">
                    <div class="play-pause-overlay"></div>
                    <video 
                        class="video-player"
                        playsinline
                        muted
                        loop
                        preload="auto"
                        autoplay
                        poster="@card.PosterUrl"
                        data-src="@card.VideoUrl"
                        data-type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
                
                <div class="interaction-buttons">
                    <div class="interaction-button">
                        <div class="button-icon">‚ù§Ô∏è</div>
                        <span class="button-count">@GetRandomCount()K</span>
                    </div>
                    <div class="interaction-button">
                        <div class="button-icon">üí¨</div>
                        <span class="button-count">@GetRandomCount()</span>
                    </div>
                    <div class="interaction-button">
                        <div class="button-icon">‚§¥Ô∏è</div>
                        <span class="button-count">@GetRandomCount()</span>
                    </div>
                    <div class="interaction-button">
                        <div class="button-icon">‚≠ê</div>
                        <span class="button-count">Add</span>
                    </div>
                </div>

                <div class="video-info">
                    <h3>@card.Title</h3>
                    <p>@card.Description</p>
                    <div class="music-info">
                        <span class="music-icon">üéµ</span>
                        <span>Original Sound - Gauntlet Exchange</span>
                    </div>
                </div>
            </div>
        }
    }

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
        </div>
    }
</div>

@code {
    private ElementReference feedContainer;
    private DotNetObjectReference<Explore> objRef;
    private Random random = new Random();
    private bool isLoading = false;
    private bool isJsInitialized = false;
    private string currentPlayingId = string.Empty;

    public class CardItem
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public string VideoUrl { get; set; }
        public string PosterUrl { get; set; }
        public string VideoId { get; set; }
        public string VideoType { get; set; } = "video/mp4";
    }

    private ObservableCollection<CardItem> cards = new();
    private List<(string VideoId, string Title, string Description, string PosterColor, string VideoUrl)> sampleContent = new()
    {
        ("tiktok1", "TikTok Video", "Original TikTok Content #viral", "FF69B4", "https://sagauntletexchange.blob.core.windows.net/videos/tiktok.mp4"),
        ("tiktok2", "TikTok Video", "More TikTok Content #viral", "FF69B4", "https://sagauntletexchange.blob.core.windows.net/videos/videoplayback.mp4"),
        ("rickroll", "Rick Astley", "Never Gonna Give You Up! #classic #meme", "FF69B4", "https://sagauntletexchange.blob.core.windows.net/videos/rick_roll.mp4")
    };

    private async Task InitializeJavaScript()
    {
        try
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("observeIntersection", feedContainer, objRef);
            await JSRuntime.InvokeVoidAsync("initializeVideoHandling");
            isJsInitialized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing JavaScript: {ex.Message}");
            await Task.Delay(500);
            await InitializeJavaScript();
        }
    }

    private async Task LoadItems()
    {
        if (isLoading) return;
        
        isLoading = true;
        StateHasChanged();

        try
        {
            foreach (var content in sampleContent)
            {
                cards.Add(new CardItem 
                {
                    Title = content.Title,
                    Description = content.Description,
                    VideoId = $"{content.VideoId}-{Guid.NewGuid().ToString("N").Substring(0, 8)}",
                    VideoUrl = content.VideoUrl,
                    PosterUrl = $"https://placehold.co/1080x1920/{content.PosterColor}/FFF?text={Uri.EscapeDataString(content.Title)}",
                    VideoType = "video/mp4"
                });
            }

            if (isJsInitialized)
            {
                await JSRuntime.InvokeVoidAsync("refreshVideoElements");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading items: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetRandomCount() => random.Next(1, 999).ToString();

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeJavaScript();
            // Give a moment for everything to initialize, then force play the first video
            await Task.Delay(1500);
            await JSRuntime.InvokeVoidAsync("playVisibleVideo");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (objRef != null)
        {
            await JSRuntime.InvokeVoidAsync("disconnectObserver");
            objRef.Dispose();
        }
    }

    [JSInvokable]
    public void UpdateCurrentPlayingId(string videoId)
    {
        currentPlayingId = videoId;
        StateHasChanged();
    }

    private async Task TogglePlayPause(string videoId)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("togglePlayPause", videoId);
        }
        catch (TaskCanceledException)
        {
            // Swallow the exception (it can occur during rapid toggling or disposal).
        }
    }

    [JSInvokable]
    public async Task OnIntersection()
    {
        // When we reach the bottom, reset to the beginning
        if (cards.Count >= sampleContent.Count)
        {
            cards.Clear();
            await LoadItems();
        }
    }
}
