@page "/explore"
@using System.Collections.ObjectModel
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Explore - Gauntlet Exchange</PageTitle>

<HeadContent>
    <script src="js/explore.js"></script>
</HeadContent>

<style>
    .tiktok-feed {
        height: 100vh;
        width: 100vw;
        background: #000;
        position: fixed;
        top: 0;
        left: 0;
        overflow-y: scroll;
        scroll-snap-type: y mandatory;
    }

    .video-container {
        height: 100vh;
        width: 100%;
        position: relative;
        scroll-snap-align: start;
        scroll-snap-stop: always;
    }

    .video-content {
        aspect-ratio: 9/16;
        position: relative;
        width: 100%;
        height: 100%;
        background: #000;
        overflow: hidden;
    }

    .video-content iframe {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(1.5);  /* Scale up to cover container */
        width: 100vw;
        height: 100vh;
        pointer-events: none;
        border: none;
    }

    /* Ensure proper sizing on different aspect ratios */
    @@media (min-aspect-ratio: 9/16) {
        .video-content iframe {
            width: 177.78vh;  /* 16/9 * 100 */
            height: 100vh;
            transform: translate(-50%, -50%);
        }
    }

    @@media (max-aspect-ratio: 9/16) {
        .video-content iframe {
            width: 100vw;
            height: 177.78vw;  /* 16/9 * 100 */
            transform: translate(-50%, -50%);
        }
    }

    /* Hide YouTube branding */
    .video-content iframe {
        opacity: 0.8; /* Slightly dim the video to match TikTok style */
    }

    .interaction-buttons {
        position: absolute;
        right: 12px;
        bottom: 150px;
        display: flex;
        flex-direction: column;
        gap: 20px;
        z-index: 100;
    }

    .interaction-button {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: white;
        gap: 5px;
    }

    .button-icon {
        width: 45px;
        height: 45px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 24px;
    }

    .button-count {
        font-size: 12px;
        font-weight: 600;
    }

    .video-info {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 20px;
        background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
        color: white;
    }

    .video-info h3 {
        margin: 0;
        font-size: 16px;
        font-weight: 600;
    }

    .video-info p {
        margin: 8px 0 0 0;
        font-size: 14px;
        opacity: 0.9;
    }

    .music-info {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-top: 12px;
        font-size: 14px;
    }

    .music-icon {
        font-size: 16px;
    }

    .loading-container {
        height: 100vh;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        scroll-snap-align: start;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #333;
        border-top: 5px solid #fff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<div class="tiktok-feed" @ref="feedContainer">
    @if (cards != null)
    {
        @for (var i = 0; i < cards.Count; i++)
        {
            var card = cards[i];
            var shouldLoad = i < currentPage * 3 + 3; // Only load next 3 videos
            <div class="video-container">
                <div class="video-content" id="player-@card.VideoId">
                    @if (shouldLoad)
                    {
                        <iframe 
                            src="@card.VideoUrl"
                            frameborder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowfullscreen>
                        </iframe>
                    }
                    else
                    {
                        <div class="placeholder" style="background-color: #000; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">
                            <div class="loading-spinner"></div>
                        </div>
                    }
                </div>
                
                <div class="interaction-buttons">
                    <div class="interaction-button">
                        <div class="button-icon">‚ù§Ô∏è</div>
                        <span class="button-count">@GetRandomCount()K</span>
                    </div>
                    <div class="interaction-button">
                        <div class="button-icon">üí¨</div>
                        <span class="button-count">@GetRandomCount()</span>
                    </div>
                    <div class="interaction-button">
                        <div class="button-icon">‚§¥Ô∏è</div>
                        <span class="button-count">@GetRandomCount()</span>
                    </div>
                    <div class="interaction-button">
                        <div class="button-icon">‚≠ê</div>
                        <span class="button-count">Add</span>
                    </div>
                </div>

                <div class="video-info">
                    <h3>@card.Title</h3>
                    <p>@card.Description</p>
                    <div class="music-info">
                        <span class="music-icon">üéµ</span>
                        <span>Original Sound - Gauntlet Exchange</span>
                    </div>
                </div>
            </div>
        }
    }

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
        </div>
    }
</div>

@code {
    private ElementReference feedContainer;
    private DotNetObjectReference<Explore> objRef;
    private Random random = new Random();
    private bool isLoading = false;
    private int currentPage = 1;
    private bool isJsInitialized = false;
    private const int ItemsPerPage = 5;

    public class CardItem
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public string VideoUrl { get; set; }
        public string PosterUrl { get; set; }
        public string VideoId { get; set; }  // Added to track video IDs
    }

    private ObservableCollection<CardItem> cards = new();
    private List<(string VideoId, string Title, string Description, string PosterColor)> sampleContent = new()
    {
        ("dQw4w9WgXcQ", "Epic Rickroll", "Never gonna give you up! #classic #meme", "FF69B4"),
        ("9bZkp7q19f0", "Gangnam Style", "Oppa Gangnam Style! #dance #viral", "9400D3"),
        ("jNQXAC9IVRw", "Me at the zoo", "The very first YouTube video! #history", "4B0082"),
        ("_OBlgSz8sSM", "Charlie bit my finger", "Ouch Charlie! #funny #classic", "00CED1"),
        ("EE-xtCF3T94", "Chocolate Rain", "I move away from the mic to breathe #music", "FF4500")
    };

    private async Task InitializeJavaScript()
    {
        try
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("observeIntersection", feedContainer, objRef);
            await JSRuntime.InvokeVoidAsync("initializeVideoHandling");
            isJsInitialized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing JavaScript: {ex.Message}");
            // Retry after a short delay
            await Task.Delay(500);
            await InitializeJavaScript();
        }
    }

    private async Task LoadMoreItems()
    {
        if (isLoading) return;
        
        isLoading = true;
        StateHasChanged();

        try
        {
            var startIndex = (currentPage - 1) * 3 % sampleContent.Count;
            var newItems = new List<CardItem>();

            for (int i = 0; i < 3; i++)
            {
                var contentIndex = (startIndex + i) % sampleContent.Count;
                var content = sampleContent[contentIndex];
                var uniqueId = Guid.NewGuid().ToString();
                newItems.Add(new CardItem 
                {
                    Title = content.Title,
                    Description = content.Description,
                    VideoId = content.VideoId,
                    VideoUrl = $"https://www.youtube.com/embed/{content.VideoId}?" + 
                              $"autoplay=1&" +
                              $"mute=1&" +
                              $"controls=0&" +
                              $"loop=1&" +
                              $"playlist={content.VideoId}&" +
                              $"playsinline=1&" +
                              $"enablejsapi=1&" +
                              $"rel=0&" +
                              $"modestbranding=1&" +
                              $"showinfo=0&" +
                              $"origin={Uri.EscapeDataString($"https://localhost?player={uniqueId}")}&" +
                              $"widget_referrer={Uri.EscapeDataString($"https://localhost?feed={uniqueId}")}&" +
                              $"iv_load_policy=3",  // Disable video annotations
                    PosterUrl = $"https://placehold.co/1080x1920/{content.PosterColor}/FFF?text={Uri.EscapeDataString(content.Title)}"
                });
            }

            foreach (var item in newItems)
            {
                cards.Add(item);
            }

            currentPage++;

            if (isJsInitialized)
            {
                await JSRuntime.InvokeVoidAsync("refreshVideoElements");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading more items: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetRandomCount() => random.Next(1, 999).ToString();

    protected override async Task OnInitializedAsync()
    {
        await LoadMoreItems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeJavaScript();
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (objRef != null)
        {
            await JSRuntime.InvokeVoidAsync("disconnectObserver");
            objRef.Dispose();
        }
    }
}
